// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quotes    Quote[]
  favorites Favorite[]
}

model Quote {
  id        String   @id @default(cuid())
  title     String
  content   String
  audioUrl  String
  author    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  favorites Favorite[]
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  quoteId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  quote     Quote    @relation(fields: [quoteId], references: [id])

  @@unique([userId, quoteId])
}

model Objective {
  id        String   @id @default(cuid())
  titulo    String
  priority  String // "1", "2", "3"
  estado    String // "En Progreso", "Pendiente", "Completado"
  urgency   String // "+", "++", "+++"
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New model for scraped/public quotes, with Int ID as per user's snippet
model PublicQuote {
  id        Int      @id @default(autoincrement())
  text      String   // Main content of the scraped quote
  author    String?
  tags      String[] @default([]) // Added for tags
  audioUrl  String?   // Optional audio URL from Supabase Storage
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now()) // Added for consistency

  userProgress UserProgress[] // Relation to UserProgress
}

// New model for tracking user progress on PublicQuotes
model UserProgress {
  id         Int      @id @default(autoincrement()) // As per new schema
  userId     String   // Clerk user ID
  publicQuoteId    Int      // Renamed to publicQuoteId to link to PublicQuote
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())

  user       User     @relation(fields: [userId], references: [clerkId])
  publicQuote      PublicQuote    @relation(fields: [publicQuoteId], references: [id])

  @@unique([userId, publicQuoteId]) // Updated unique constraint
  @@index([userId])
  @@index([publicQuoteId])
}
